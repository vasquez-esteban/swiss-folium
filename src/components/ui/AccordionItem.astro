---
type Props = {
  title: string;
  description: string;
};

const { title, description } = Astro.props;
---

<div
  class="accordion__item group h-[60px] w-full overflow-hidden transition-all duration-400"
>
  <button
    class="accordion__toggle flex h-[60px] w-full cursor-pointer items-center justify-between border-b-2 border-secondary"
    id={`${title} accordion__item menu button`}
    aria-expanded="false"
    aria-controls={`${title} accordion__item menu content`}
  >
    {title}

    <svg
      class="accordion__icon h-3 w-3 transition-transform duration-300"
      viewBox="0 0 23 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M21.1024 1.54757C21.1287 0.995908 20.7027 0.527403 20.1511 0.501132L11.1613 0.0730241C10.6096 0.0467534 10.1411 0.472665 10.1148 1.02432C10.0886 1.57598 10.5145 2.04449 11.0661 2.07076L19.0571 2.4513L18.6765 10.4422C18.6503 10.9939 19.0762 11.4624 19.6278 11.4887C20.1795 11.515 20.648 11.089 20.6743 10.5374L21.1024 1.54757ZM4.27611 17.2399L20.7762 2.23994L19.4308 0.760059L2.93077 15.7601L4.27611 17.2399Z"
        fill="black"></path>
    </svg>
  </button>
  <div
    id={`${title} accordion__item menu content`}
    aria-labelledby={`${title} accordion__item menu button`}
    class="accordion__content"
  >
    <p class="prose mb-4 mt-1 max-w-full transition-[height]">
      {description}
    </p>
  </div>
</div>
<script>
  function accordionSetup() {
    const accordionItems = document.querySelectorAll(
      ".accordion__item"
      // eslint-disable-next-line
    ) as NodeListOf<HTMLElement>;

    accordionItems.forEach((accordionItem) => {
      const accordionToggle = accordionItem.querySelector(".accordion__toggle");
      const accordionIcon = accordionItem.querySelector(".accordion__icon");

      if (accordionToggle && accordionIcon) {
        accordionToggle.addEventListener("mouseover", (e) => {
          e.stopPropagation(); // prevent the event from bubbling up to the document

          // Close other accordion items
          accordionItems.forEach((otherAccordionItem) => {
            if (
              otherAccordionItem !== accordionItem &&
              otherAccordionItem.classList.contains("active")
            ) {
              const otherAccordionToggle =
                otherAccordionItem.querySelector(".accordion__toggle");
              const otherAccordionIcon =
                otherAccordionItem.querySelector(".accordion__icon");

              if (otherAccordionToggle && otherAccordionIcon) {
                otherAccordionItem.classList.remove("active");
                otherAccordionToggle.setAttribute("aria-expanded", "false");
                otherAccordionItem.style.height = "60px";
                otherAccordionIcon.classList.remove("rotate-180");
              }
            }
          });

          // Close itself if it's open, otherwise open it
          if (!accordionItem.classList.contains("active")) {
            accordionItem.classList.add("active");
            accordionToggle.setAttribute("aria-expanded", "true");

            // Set height according to content
            accordionItem.style.height = accordionItem.scrollHeight + "px";
            accordionIcon.classList.add("rotate-180");
          } else {
            accordionItem.classList.remove("active");
            accordionToggle.setAttribute("aria-expanded", "false");

            // Reset height. Accordion Items have Overflow hidden so when it's
            // height is 60, because the toggle's height is 60, the content is hidden
            accordionItem.style.height = "60px";
            accordionIcon.classList.remove("rotate-180");
          }

          e.preventDefault();
          return false;
        });
      }
    });

    // Close the accordion when clicking outside of it
    document.addEventListener("mouseover", (event) => {
      accordionItems.forEach((accordionItem) => {
        const accordionToggle =
          accordionItem.querySelector(".accordion__toggle");
        const accordionIcon = accordionItem.querySelector(".accordion__icon");

        if (
          accordionToggle &&
          accordionIcon &&
          !accordionItem.contains(event.target as Node)
        ) {
          accordionItem.classList.remove("active");
          accordionToggle.setAttribute("aria-expanded", "false");

          // Reset height. Overflow gets hidden
          accordionItem.style.height = "60px";
          accordionIcon.classList.remove("rotate-180");
        }
      });
    });
  }

  // Run on page swap
  accordionSetup();
  document.addEventListener("astro:after-swap", accordionSetup);
</script>
